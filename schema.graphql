# Imported Models

type Quote @entity {
	id: String!
	globalCounter: BigInt!
	quoteId: BigInt!
	quoteStatus: Int
	partyA: Bytes!
	partyB: Bytes
	action: String!
	blockNumber: BigInt!

	# open request
	requestedOpenPrice: BigInt
	marketPrice: BigInt
	orderTypeOpen: Int
	quantity: BigInt
	cva: BigInt
	lf: BigInt
	partyBmm: BigInt
	partyAmm: BigInt
	symbolId: BigInt
	symbol: String
	positionType: Int
	openDeadline: BigInt
	partyBsWhiteList: [Bytes!]
	maxFundingRate: BigInt

	# open
	fillAmount: BigInt
	openedPrice: BigInt
	tradingFee: BigInt!

	# initial
	initialOpenedPrice: BigInt
	initialData: InitialQuote

	# close request
	closePrice: BigInt # request
	orderTypeClose: Int
	closedPrice: BigInt # done
	closeDeadline: BigInt
	quantityToClose: BigInt

	# closed
	closedAmount: BigInt
	leverage: BigInt
	averageClosedPrice: BigInt

	# liquidation
	liquidatePrice: BigInt
	liquidateAmount: BigInt

	# funding rate
	fundingRateFee: BigInt
	fundingRateOpenedPrice: BigInt

	# timestamps
	timeStamp: BigInt!
	eventsTimestamp: EventsTimestamp!

	# transaction hashes
	transactionsHash: TransactionsHash
}

type InitialQuote @entity {
	id: ID!
	quoteId: BigInt!
	orderTypeOpen: Int!
	partyA: Bytes!
	symbolId: BigInt!
	positionType: Int!
	requestedOpenPrice: BigInt!
	quantity: BigInt!
	cva: BigInt!
	partyAmm: BigInt
	partyBmm: BigInt!
	lf: BigInt!
	tradingFee: BigInt
	deadline: BigInt!
	quoteStatus: Int!
	marketPrice: BigInt!
	symbol: String!
	partyBsWhiteList: [Bytes!]
	timeStamp: BigInt!
}

type EventsTimestamp @entity {
	id: ID!
	lastFundingPayment: BigInt
	ExpireQuote: BigInt
	AcceptCancelCloseRequest: BigInt
	AcceptCancelRequest: BigInt
	EmergencyClosePosition: BigInt
	ForceCancelCloseRequest: BigInt
	FillCloseRequest: BigInt
	ForceCancelQuote: BigInt
	ForceClosePosition: BigInt
	LockQuote: BigInt
	RequestToCancelCloseRequest: BigInt
	OpenPosition: BigInt
	RequestToCancelQuote: BigInt
	SendQuote: BigInt
	RequestToLimitClosePosition: BigInt
	UnlockQuote: BigInt
	RequestToClosePosition: BigInt
	LiquidatePositionsPartyA: BigInt
	LiquidatePositionsPartyB: BigInt
}

type TransactionsHash @entity {
	id: ID!
	ExpireQuote: Bytes
	AcceptCancelCloseRequest: Bytes
	AcceptCancelRequest: Bytes
	EmergencyClosePosition: Bytes
	ForceCancelCloseRequest: Bytes
	FillCloseRequest: Bytes
	ForceCancelQuote: Bytes
	ForceClosePosition: Bytes
	LockQuote: Bytes
	RequestToCancelCloseRequest: Bytes
	OpenPosition: Bytes
	RequestToCancelQuote: Bytes
	SendQuote: Bytes
	RequestToLimitClosePosition: Bytes
	UnlockQuote: Bytes
	RequestToClosePosition: Bytes
	LiquidatePositionsPartyA: Bytes
	LiquidatePositionsPartyB: Bytes
}
type PartyA @entity {
	id: String!
	partyB: Bytes
	quoteUntilLiquid: [BigInt!]
	globalCounter: BigInt!
}

type PartyBPartyA @entity {
	id: String!
	partyB: Bytes
	quoteUntilLiquid: [BigInt!]
	globalCounter: BigInt!
}

type PartyASymbolPrice @entity {
	id: String!
	partyA: Bytes!
	symbolId: BigInt!
	requestedOpenPrice: BigInt!
	timeStamp: BigInt!
	trHash: Bytes!
	GlobalCounter: BigInt!
}

type GlobalFee @entity {
	id: ID!
	globalFee: BigInt!
	latestTimestamp: BigInt!
}

type User @entity {
    id: ID!
    globalCounter: BigInt!
    address: Bytes!
    timestamp: BigInt!
    transaction: Bytes!
}
type Symbol @entity {
    id: ID!
    globalCounter: BigInt!
    name: String!
    tradingFee: BigInt!
    timestamp: BigInt!
    blockNumber: BigInt!
    updateTimestamp: BigInt!
}
type GlobalCounter @entity {
    id: String!
    counter: BigInt!
}

type Account @entity {
    id: ID!
    globalCounter: BigInt!
    user: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    name: String
    lastActivityTimestamp: BigInt!
    transaction: Bytes!
    updateTimestamp: BigInt!
    accountSource: Bytes
    quotesCount: BigInt!
    positionsCount: BigInt!
    deposit: BigInt!
    withdraw: BigInt!
    allocated: BigInt!
    deallocated: BigInt!
}#=======================

type UserActivity @entity {
    id: ID!
    user: Bytes!
    accountSource: Bytes
    timestamp: BigInt!
    updateTimestamp: BigInt
}

type BalanceChange @entity {
    id: ID!
    type: String!
    account: Bytes!
    amount: BigInt!
    collateral: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    transaction: Bytes!
}

type TradeHistory @entity {
    id: ID!
    account: Bytes!
    volume: BigInt!
    timestamp: BigInt!
    updateTimestamp: BigInt!
    blockNumber: BigInt!
    transaction: Bytes!
    quoteStatus: Int!
    quote: BigInt!
}

type DailyHistory @entity {
    id: ID!
    quotesCount: BigInt!
    tradeVolume: BigInt!
    openTradeVolume: BigInt!
    closeTradeVolume: BigInt!
    deposit: BigInt!
    withdraw: BigInt!
    allocate: BigInt!
    deallocate: BigInt!
    activeUsers: BigInt!
    newUsers: BigInt!
    newAccounts: BigInt!
    platformFee: BigInt!
    openInterest: BigInt!
    fundingPaid: BigInt!
    fundingReceived: BigInt!
    accountSource: Bytes
    updateTimestamp: BigInt!
    timestamp: BigInt!
}

type TotalHistory @entity {
    id: ID!
    quotesCount: BigInt!
    tradeVolume: BigInt!
    openTradeVolume: BigInt!
    closeTradeVolume: BigInt!
    deposit: BigInt!
    withdraw: BigInt!
    allocate: BigInt!
    deallocate: BigInt!
    users: BigInt!
    accounts: BigInt!
    platformFee: BigInt!
    fundingPaid: BigInt!
    fundingReceived: BigInt!
    accountSource: Bytes
    updateTimestamp: BigInt!
    timestamp: BigInt!
}

type SymbolTradeVolume @entity {
    id: ID!
    symbolId: BigInt!
    timestamp: BigInt!
    updateTimestamp: BigInt!
    volume: BigInt!
    accountSource: Bytes
}

type OpenInterest @entity {
    id: ID!
    amount: BigInt!
    accumulatedAmount: BigInt!
    timestamp: BigInt!
}

type PriceCheck @entity{
    id: ID!
    givenPrice: BigInt!
    symbol: String!
    additionalInfo: String!
    event: String!
    timestamp: BigInt!
    transaction: Bytes!
}

type PartyALiquidation @entity{
    id: ID!
    partyA: Bytes!
    liquidator: Bytes!
    liquidationType: Int!
    timestamp: BigInt!
    transaction: Bytes!
    liquidateAllocatedBalance:BigInt
    liquidateCva:BigInt
    liquidatePendingCva:BigInt
    liquidateLf:BigInt
    liquidatePendingLf:BigInt
}

type PartyBLiquidation @entity{
    id: ID!
    partyA: Bytes!
    partyB: Bytes!
    liquidator: Bytes!
    timestamp: BigInt!
    transaction: Bytes!
    liquidateAllocatedBalance:BigInt
    liquidateCva:BigInt
    liquidatePendingCva:BigInt
    liquidateLf:BigInt
    liquidatePendingLf:BigInt
}

type PartyALiquidationDisputed @entity{
    id: ID!
    partyA: Bytes!
    timestamp: BigInt!
    transaction: Bytes!
}

type Configuration @entity{
    id: ID!
    collateral: Bytes!
    updateTimestamp: BigInt!
    updateTransaction: Bytes!
}

type GrantedRole @entity{
    id: ID!
    role: String!
    user: Bytes!
    contract: Bytes
    grantTransaction: Bytes
    revokeTransaction: Bytes
    updateTimestamp: BigInt!
}