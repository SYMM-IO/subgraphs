type Deposit @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    sender: Bytes!
    user: Bytes!
    collateral: Bytes!
    amount: BigInt!
    newBalance: BigInt!
}

type InternalTransfer @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    sender: Bytes!
    user: Bytes!
    collateral: Bytes!
    amount: BigInt!
    newBalance: BigInt!
}

type InitiateWithdraw @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    withdrawId: BigInt!
    user: Bytes!
    to: Bytes!
    collateral: Bytes!
    amount: BigInt!
    newBalance: BigInt!
}

type CompleteWithdraw @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    withdrawId: BigInt!
}

type CancelWithdraw @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    withdrawId: BigInt!
    user: Bytes!
    newBalance: BigInt!
}

type ActivateInstantActionMode @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    user: Bytes!
    timestamp: BigInt!
}

type ProposeToDeactivateInstantActionMode @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    user: Bytes!
    timestamp: BigInt!
}

type DeactivateInstantActionMode @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    user: Bytes!
    timestamp: BigInt!
}

type SyncBalances @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    collateral: Bytes!
    partyA: Bytes!
    partyBs: [Bytes!]
}

type BindToPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyA: Bytes!
    partyB: Bytes!
}

type InitiateUnbindingFromPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyA: Bytes!
    partyB: Bytes!
    initiationTime: BigInt!
}

type CompleteUnbindingFromPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyA: Bytes!
    partyB: Bytes!
}

type CancelUnbindingFromPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyA: Bytes!
    partyB: Bytes!
}

type TransferToBridge @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    sender: Bytes!
    receiver: Bytes!
    collateral: Bytes!
    amount: BigInt!
    bridgeAddress: Bytes!
    transactionId: BigInt!
}

type WithdrawReceivedBridgeValue @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    transactionId: BigInt!
}

type SuspendBridgeTransaction @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    transactionId: BigInt!
}

type RestoreBridgeTransaction @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    transactionId: BigInt!
    validAmount: BigInt!
}

type WithdrawReceivedBridgeValues @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    transactionIds: [BigInt!]
}

type FlagLiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    operator: Bytes!
    partyB: Bytes!
    collateral: Bytes!
}

type UnflagLiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    operator: Bytes!
    partyB: Bytes!
    collateral: Bytes!
}

type Liquidate @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    liquidationId: Bytes!
    liquidator: Bytes!
    partyB: Bytes!
    collateral: Bytes!
    balance: BigInt!
    upnl: BigInt!
    collateralPrice: BigInt!
}

type ConfiscatePartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    partyA: Bytes!
    collateral: Bytes!
    amount: BigInt!
}

type ConfiscatePartyBWithdrawal @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    withdrawId: BigInt!
}

type CloseTradesForLiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeIds: [BigInt!]
    prices: [BigInt!]
}

type DistributeCollateral @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    liquidationId: BigInt!
    partyB: Bytes!
    collateral: Bytes!
    partyAs: [Bytes!]
    amounts: [BigInt!]
}

type FullyLiquidated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    liquidationId: BigInt!
}

type CollateralWhitelisted @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    collateral: Bytes!
}

type CollateralRemovedFromWhitelist @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    collateral: Bytes!
}

type MaxCloseOrdersLengthUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    max: BigInt!
}

type MaxTradePerPartyAUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    max: BigInt!
}

type BalanceLimitPerUserUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    limit: BigInt!
}

type PartyADeallocateCooldownUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    cooldown: BigInt!
}

type PartyBDeallocateCooldownUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    cooldown: BigInt!
}

type ForceCancelOpenIntentTimeoutUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    timeout: BigInt!
}

type ForceCancelCloseIntentTimeoutUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    timeout: BigInt!
}

type DefaultFeeCollectorUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    collector: Bytes!
}

type GlobalPaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type DepositPaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type WithdrawPaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type PartyBActionsPaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type PartyAActionsPaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type LiquidatingPaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type GlobalUnpaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type DepositUnpaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type WithdrawUnpaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type PartyBActionsUnpaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type PartyAActionsUnpaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type LiquidatingUnpaused @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type EmergencyModeActivated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type EmergencyModeDeactivated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!


}

type PartyBEmergencyStatusActivated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
}

type PartyBEmergencyStatusDeactivated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
}

type AffiliateStatusUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    affiliate: Bytes!
    status: Boolean!
}

type AffiliateFeeCollectorUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    affiliate: Bytes!
    feeCollector: Bytes!
}

type RoleUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    account: Bytes!
    role: Bytes!
    granted: Boolean!
}

type PartyBConfig @entity(immutable: true) {
    id: ID!

    isActive: Boolean!
    lossCoverage: BigInt!
    oracleId: BigInt!
    symbolType: BigInt!
}

type PartyBConfigUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    config: [PartyBConfig!]
}

type SettlementPriceSigValidTimeUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    time: BigInt!
}

type LiquidationSigValidTimeUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    time: BigInt!
}

type LiquidationDetailUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    collateral: Bytes!
}

type SymbolPriceUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    symbolId: BigInt!
}

type RoleGranted @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    role: Bytes!
    user: Bytes!
}

type RoleRevoked @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    role: Bytes!
    user: Bytes!
}

type PartyBReleaseIntervalUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyB: Bytes!
    interval: BigInt!
}

type MaxConnectedPartyBsUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    max: BigInt!
}

type UnbindingCooldownUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    cooldown: BigInt!
}

type AddressSuspended @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    user: Bytes!
    status: Boolean!
}

type WithdrawalSuspended @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    withdrawId: BigInt!
    status: Boolean!
}

type DeactiveInstantActionModeCooldownUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    cooldown: BigInt!
}

type InstantActionsModeUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    user: Bytes!
    status: Boolean!
}

type InstantActionsModeDeactivateTimeUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    user: Bytes!
    time: BigInt!
}

type OracleAdded @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    oracleId: BigInt!
    name: String!
    contractAddress: Bytes!
}

type SymbolAdded @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    symbolId: BigInt!
    name: String!
    optionType: Int!
    collateral: Bytes!
}

type PriceOracleAddressUpdated @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    oracle: Bytes!
}

type ForceCancelOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type ForceCancelCloseIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type SendTransferIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
    sender: Bytes!
    partyBWhitelist: [Bytes!]
    price: BigInt!
    deadline: BigInt!
}

type CancelTransferIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
}

type LockTransferIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
    counterParty: Bytes!
}

type UnlockTransferIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
    counterParty: Bytes!
}

type AcceptCancelTransferIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
    counterParty: Bytes!
}

type FinalizeTransferIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
    fillPrice: BigInt!
    counterParty: Bytes!
    clearingHouseSignature: Bytes!
}

type SendCloseIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    tradeId: BigInt!
    intentId: BigInt!
    price: BigInt!
    quantity: BigInt!
    deadline: BigInt!
}

type CancelCloseIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type TransferTradeByPartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    sender: Bytes!
    receiver: Bytes!
    tradeId: BigInt!
}

type CancelOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
    finalStatus: Int!
}

type AcceptCancelCloseIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type FillCloseIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
    quantity: BigInt!
    price: BigInt!
}

type AcceptCancelOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type LockOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
    partyB: Bytes!
}

type UnlockOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type FillOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
    tradeId: BigInt!
    quantity: BigInt!
    price: BigInt!
}

type ExpireTrade @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    operator: Bytes!
    tradeId: BigInt!
    settlementPrice: BigInt!
}

type ExerciseTrade @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    operator: Bytes!
    tradeId: BigInt!
    settlementPrice: BigInt!
}

type AddAccount @entity(immutable: true) {
	id: ID!
	counterId: BigInt!
	blockNumber: BigInt!
	blockTimestamp: BigInt!
	transactionHash: Bytes!
	transactionIndex: BigInt!
	logIndex: BigInt!
	blockHash: Bytes!

	account: Bytes!
	user: Bytes!
	accountSource: Bytes!
}

type SendOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    partyA: Bytes!
    intentId: BigInt!
    partyBsWhiteList: [Bytes!]
    requestedParams: Bytes!
}

type ExpireOpenIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}

type ExpireCloseIntent @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!

    intentId: BigInt!
}