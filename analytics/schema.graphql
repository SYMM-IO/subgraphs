type User @entity {
    id: ID!
    timestamp: BigInt!
    transaction: Bytes!
}

type UserActivity @entity {
    id: ID!
    user: String!
    accountSource: Bytes
    timestamp: BigInt!
    updateTimestamp: BigInt
}

type Account @entity {
    id: ID!
    user: String!
    timestamp: BigInt!
    name: String
    quotesCount: BigInt!
    positionsCount: BigInt!
    lastActivityTimestamp: BigInt!
    deposit: BigInt!
    withdraw: BigInt!
    allocated: BigInt!
    deallocated: BigInt!
    transaction: Bytes!
    updateTimestamp: BigInt!
    accountSource: Bytes
}

type BalanceChange @entity {
    id: ID!
    type: String!
    account: String!
    amount: BigInt!
    collateral: Bytes!
    timestamp: BigInt!
    blockNumber: BigInt!
    transaction: Bytes!
}

type TradeHistory @entity {
    id: ID!
    account: String!
    volume: BigInt!
    timestamp: BigInt!
    updateTimestamp: BigInt!
    blockNumber: BigInt!
    transaction: Bytes!
    quoteStatus: Int!
    quote: BigInt!
}

type Quote @entity {
    id: ID!
    account: String!
    partyBsWhiteList: [Bytes!]
    symbolId: BigInt!
    positionType: Int!
    orderType: Int!
    price: BigInt!
    marketPrice: BigInt!
    openedPrice: BigInt
    openPrice: BigInt
    deadline: BigInt!
    quantity: BigInt!
    cva: BigInt!
    partyAmm: BigInt!
    partyBmm: BigInt!
    lf: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    closedAmount: BigInt!
    avgClosedPrice: BigInt!
    partyB: Bytes
    collateral: Bytes!
    liquidatedSide: Int
    fundingPaid: BigInt!
    fundingReceived: BigInt!
    timestamp: BigInt!
    updateTimestamp: BigInt!
    transaction: Bytes!
}

type DailyHistory @entity {
    id: ID!
    quotesCount: BigInt!
    tradeVolume: BigInt!
    openTradeVolume: BigInt!
    closeTradeVolume: BigInt!
    deposit: BigInt!
    withdraw: BigInt!
    allocate: BigInt!
    deallocate: BigInt!
    activeUsers: BigInt!
    newUsers: BigInt!
    newAccounts: BigInt!
    platformFee: BigInt!
    openInterest: BigInt!
    fundingPaid: BigInt!
    fundingReceived: BigInt!
    accountSource: Bytes
    updateTimestamp: BigInt!
    timestamp: BigInt!
}

type TotalHistory @entity {
    id: ID!
    quotesCount: BigInt!
    tradeVolume: BigInt!
    openTradeVolume: BigInt!
    closeTradeVolume: BigInt!
    deposit: BigInt!
    withdraw: BigInt!
    allocate: BigInt!
    deallocate: BigInt!
    users: BigInt!
    accounts: BigInt!
    platformFee: BigInt!
    fundingPaid: BigInt!
    fundingReceived: BigInt!
    accountSource: Bytes
    updateTimestamp: BigInt!
    timestamp: BigInt!
}

type Symbol @entity {
    id: ID!
    name: String!
    tradingFee: BigInt!
    timestamp: BigInt!
    updateTimestamp: BigInt!
}

type SymbolTradeVolume @entity {
    id: ID!
    symbolId: BigInt!
    timestamp: BigInt!
    updateTimestamp: BigInt!
    volume: BigInt!
    accountSource: Bytes
}

type OpenInterest @entity {
    id: ID!
    amount: BigInt!
    accumulatedAmount: BigInt!
    timestamp: BigInt!
}

type PriceCheck @entity{
    id: ID!
    givenPrice: BigInt!
    symbol: String!
    additionalInfo: String!
    event: String!
    timestamp: BigInt!
    transaction: Bytes!
}

type PartyALiquidation @entity{
    id: ID!
    partyA: Bytes!
    liquidator: Bytes!
    liquidationType: Int!
    timestamp: BigInt!
    transaction: Bytes!
    liquidateAllocatedBalance:BigInt
    liquidateCva:BigInt
    liquidatePendingCva:BigInt
    liquidateLf:BigInt
    liquidatePendingLf:BigInt
}

type PartyBLiquidation @entity{
    id: ID!
    partyA: Bytes!
    partyB: Bytes!
    liquidator: Bytes!
    timestamp: BigInt!
    transaction: Bytes!
    liquidateAllocatedBalance:BigInt
    liquidateCva:BigInt
    liquidatePendingCva:BigInt
    liquidateLf:BigInt
    liquidatePendingLf:BigInt
}

type PartyALiquidationDisputed @entity{
    id: ID!
    partyA: Bytes!
    timestamp: BigInt!
    transaction: Bytes!
}

type Configuration @entity{
    id: ID!
    collateral: Bytes!
    updateTimestamp: BigInt!
    updateTransaction: Bytes!
}

type GrantedRole @entity{
    id: ID!
    role: String!
    user: Bytes!
    grantTransaction: Bytes
    revokeTransaction: Bytes
    updateTimestamp: BigInt!
}