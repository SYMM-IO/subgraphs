# in RFQ and Open create this entity
type ResultEntity @entity {
  id: String!
  orderTypeOpen: Int #new
  orderTypeClose: Int #new
  quoteId: BigInt! #new
  quoteStatus: Int
  fillAmount: BigInt
  closedPrice: BigInt # done
  closePrice: BigInt # request
  partyA: Bytes!
  partyB: Bytes
  quantityToClose: BigInt
  deadline: BigInt
  partyBsWhiteList: [Bytes!]
  symbolId: BigInt
  symbol: String
  positionType: Int
  requestedOpenPrice: BigInt
  quantity: BigInt
  cva: BigInt
  partyAmm: BigInt
  partyBmm: BigInt
  lf: BigInt
  leverage: BigInt
  maxFundingRate: BigInt
  openedPrice: BigInt
  timeStamp: BigInt! #new
  marketPrice: BigInt
  initialOpenedPrice: BigInt
  tradingFee: BigInt!
  averageClosedPrice: BigInt
  closedAmount: BigInt
  liquidatePrice: BigInt
  liquidateAmount: BigInt
  initialData: InitialQuote

  # timestamp
  subgraphTimestamp: String
  lastFundingPaymentTimestamp: BigInt
  timestampsExpireQuoteTimeStamp: BigInt
  timestampsAcceptCancelCloseRequestTimeStamp: BigInt
  timestampsAcceptCancelRequestTimeStamp: BigInt
  timestampsEmergencyClosePositionTimeStamp: BigInt
  timestampsForceCancelCloseRequestTimeStamp: BigInt
  timestampsFillCloseRequestTimeStamp: BigInt
  timestampsForceCancelQuoteTimeStamp: BigInt
  timestampsForceClosePositionTimeStamp: BigInt
  timestampsLockQuoteTimeStamp: BigInt
  timestampsRequestToCancelCloseRequestTimeStamp: BigInt
  timestampsOpenPositionTimeStamp: BigInt
  timestampsRequestToCancelQuoteTimeStamp: BigInt
  timestampsSendQuoteTimeStamp: BigInt
  timestampsRequestToLimitClosePositionTimeStamp: BigInt
  timestampsUnlockQuoteTimeStamp: BigInt
  timestampsRequestToClosePositionTimeStamp: BigInt
  timeStampLiquidatePositionsPartyATimeStamp: BigInt
  timeStampLiquidatePositionsPartyBTimeStamp: BigInt
  # trhash
  TrHashExpireQuote: Bytes
  TrHashAcceptCancelCloseRequest: Bytes
  TrHashAcceptCancelRequest: Bytes
  TrHashEmergencyClosePosition: Bytes
  TrHashForceCancelCloseRequest: Bytes
  TrHashFillCloseRequest: Bytes
  TrHashForceCancelQuote: Bytes
  TrHashForceClosePosition: Bytes
  TrHashLockQuote: Bytes
  TrHashRequestToCancelCloseRequest: Bytes
  TrHashOpenPosition: Bytes
  TrHashRequestToCancelQuote: Bytes
  TrHashSendQuote: Bytes
  TrHashRequestToLimitClosePosition: Bytes
  TrHashUnlockQuote: Bytes
  TrHashRequestToClosePosition: Bytes
  TrHashLiquidatePositionsPartyA: Bytes
  TrHashLiquidatePositionsPartyB: Bytes

  GlobalCounter: BigInt!
}

type InitialQuote @entity {
  id: ID!
  quoteId: BigInt!
  orderTypeOpen: Int!
  partyA: Bytes!
  symbolId: BigInt!
  positionType: Int!
  requestedOpenPrice: BigInt!
  quantity: BigInt!
  cva: BigInt!
  partyAmm: BigInt
  partyBmm: BigInt!
  lf: BigInt!
  tradingFee: BigInt
  deadline: BigInt!
  quoteStatus: Int!
  marketPrice: BigInt!
  symbol: String!
  partyBsWhiteList: [Bytes!]
  timeStamp: BigInt!
}

type PartyA @entity {
  id: String!
  partyB: Bytes
  quoteUntilLiquid: [BigInt!]
  GlobalCounter: BigInt!
}

type PartyApartyB @entity {
  id: String!
  quoteUntilLiquid: [BigInt!]
  GlobalCounter: BigInt!
}

type LiquidTransaction @entity {
  id: String!
  mode: LiquidMode
  balance: BigInt!
  pendigQuoteLiquidateList: [BigInt!]
  listLenght: Int!
  partyA: Bytes!
  partyB: Bytes
  timeStamp: BigInt!
  GlobalCounter: BigInt!
}

enum LiquidMode {
  PartyA
  PartyB
  Pending
}

type PartyASymbolPrice @entity {
  id: String!
  partyA: Bytes!
  symbolId: BigInt!
  requestedOpenPrice: BigInt!
  timeStamp: BigInt!
  trHash: Bytes!
  GlobalCounter: BigInt!
}

type SymbolInfo @entity {
  id: String!
  symbolId: BigInt!
  tradingFee: BigInt!
  GlobalCounter: BigInt!
}

type GlobalCounter @entity {
  id: String!
  GlobalCounter: BigInt!
}

type DebugEntity @entity {
  id: String!
  timestamp: BigInt!
  trigger: BigInt
  type: String
  message: String
}
