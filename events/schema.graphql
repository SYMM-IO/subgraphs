type AcceptCancelCloseRequest @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AcceptCancelRequest @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ActiveEmergencyMode @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AddBridge @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    bridge: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AddSymbol @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    fundingRateEpochDuration: BigInt!
    fundingRateWindowTime: BigInt!
    maxLeverage: BigInt!
    minAcceptablePortionLF: BigInt!
    minAcceptableQuoteValue: BigInt!
    name: String!
    symbolId: BigInt!
    tradingFee: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AllocateForPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    newAllocatedBalance: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AllocatePartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    newAllocatedBalance: BigInt!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AllocatePartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type BalanceChangePartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    _type: Int!
    amount: BigInt!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type BalanceChangePartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    _type: Int!
    amount: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ChargeFundingRate @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteIds: [BigInt!]
    rates: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DeactiveEmergencyMode @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DeallocateForPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    newAllocatedBalance: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DeallocatePartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    newAllocatedBalance: BigInt!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DeferredLiquidatePartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    allocatedBalance: BigInt!
    liquidationAllocatedBalance: BigInt!
    liquidationBlockNumber: BigInt!
    liquidationId: Bytes!
    liquidationTimestamp: BigInt!
    liquidator: Bytes!
    partyA: Bytes!
    totalUnrealizedLoss: BigInt!
    upnl: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type Deposit @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    sender: Bytes!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DepositToReserveVault @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    partyB: Bytes!
    sender: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DeregisterAffiliate @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    affilate: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DeregisterPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    index: BigInt!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type DisputeForLiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    liquidationId: Bytes!
    liquidator: Bytes!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type EmergencyClosePosition @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    closedPrice: BigInt!
    filledAmount: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ExpireQuote @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ExpireQuoteClose @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ExpireQuoteOpen @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type FillCloseRequest @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    closedPrice: BigInt!
    filledAmount: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ForceCancelCloseRequest @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ForceCancelQuote @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ForceClosePosition @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    closedPrice: BigInt!
    filledAmount: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type FullyLiquidatedPartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    liquidationId: Bytes!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type FullyLiquidatedPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type InternalTransfer @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    sender: Bytes!
    user: Bytes!
    userNewAllocatedBalance: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LiquidatePartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    allocatedBalance: BigInt!
    liquidationId: Bytes!
    liquidator: Bytes!
    partyA: Bytes!
    totalUnrealizedLoss: BigInt!
    upnl: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LiquidatePartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    liquidator: Bytes!
    partyA: Bytes!
    partyB: Bytes!
    partyBAllocatedBalance: BigInt!
    upnl: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LiquidatePendingPositionsPartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    liquidatedAmounts: [BigInt!]
    liquidationId: Bytes!
    liquidator: Bytes!
    partyA: Bytes!
    quoteIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LiquidatePositionsPartyA @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeIds: [BigInt!]
    liquidatedAmounts: [BigInt!]
    liquidationId: Bytes!
    liquidator: Bytes!
    partyA: Bytes!
    quoteIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LiquidatePositionsPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeIds: [BigInt!]
    liquidatedAmounts: [BigInt!]
    liquidator: Bytes!
    partyA: Bytes!
    partyB: Bytes!
    quoteIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LiquidationDisputed @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    liquidationId: Bytes!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type LockQuote @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type OpenPosition @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    filledAmount: BigInt!
    openedPrice: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type PauseAccounting @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type PauseGlobal @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type PauseInternalTransfer @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type PauseLiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type PausePartyAActions @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type PausePartyBActions @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RegisterAffiliate @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    affilate: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RegisterPartyB @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RemoveBridge @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    bridge: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RequestToCancelCloseRequest @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RequestToCancelQuote @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RequestToClosePosition @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    closeId: BigInt!
    closePrice: BigInt!
    deadline: BigInt!
    orderType: Int!
    partyA: Bytes!
    partyB: Bytes!
    quantityToClose: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type ResolveLiquidationDispute @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amounts: [BigInt!]
    disputed: Boolean!
    liquidationId: Bytes!
    partyA: Bytes!
    partyBs: [Bytes!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RestoreBridgeTransaction @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    transactionId: BigInt!
    validAmount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    role: Bytes!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    role: Bytes!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SendQuote @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    cva: BigInt!
    deadline: BigInt!
    lf: BigInt!
    marketPrice: BigInt!
    orderType: Int!
    partyA: Bytes!
    partyAmm: BigInt!
    partyBmm: BigInt!
    partyBsWhiteList: [Bytes!]
    positionType: Int!
    price: BigInt!
    quantity: BigInt!
    quoteId: BigInt!
	accountSource: Bytes!
    symbolId: BigInt!
    tradingFee: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetBalanceLimitPerUser @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    balanceLimitPerUser: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetCollateral @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    collateral: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetDeallocateCooldown @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newDeallocateCooldown: BigInt!
    oldDeallocateCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetDeallocateDebounceTime @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newDeallocateDebounceTime: BigInt!
    oldDeallocateDebounceTime: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetDefaultFeeCollector @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newDefaultFeeCollector: Bytes!
    oldDefaultFeeCollector: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetFeeCollector @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    affiliate: Bytes!
    newFeeCollector: Bytes!
    oldFeeCollector: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceCancelCloseCooldown @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newForceCancelCloseCooldown: BigInt!
    oldForceCancelCloseCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceCancelCooldown @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newForceCancelCooldown: BigInt!
    oldForceCancelCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceCloseCooldown @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newForceCloseCooldown: BigInt!
    oldForceCloseCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceCloseCooldowns @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newForceCloseFirstCooldown: BigInt!
    newForceCloseSecondCooldown: BigInt!
    oldForceCloseFirstCooldown: BigInt!
    oldForceCloseSecondCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceCloseGapRatio @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newForceCloseGapRatio: BigInt!
    oldForceCloseGapRatio: BigInt!
    symbolId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceCloseMinSigPeriod @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newCloseMinSigPeriod: BigInt!
    oldCloseMinSigPeriod: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetForceClosePricePenalty @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newPricePenalty: BigInt!
    oldPricePenalty: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetInvalidBridgedAmountsPool @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newInvalidBridgedAmountsPool: Bytes!
    oldInvalidBridgedAmountsPool: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetLiquidationTimeout @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newLiquidationTimeout: BigInt!
    oldLiquidationTimeout: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetLiquidatorShare @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newLiquidatorShare: BigInt!
    oldLiquidatorShare: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetMuonConfig @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    priceValidTime: BigInt!
    upnlValidTime: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetMuonIds @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    gateway: Bytes!
    muonAppId: BigInt!
    parity: Int!
    x: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetPartyBEmergencyStatus @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyB: Bytes!
    status: Boolean!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetPendingQuotesValidLength @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newPendingQuotesValidLength: BigInt!
    oldPendingQuotesValidLength: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSettlementCooldown @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newSettlementCooldown: BigInt!
    oldSettlementCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSuspendedAddress @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    isSuspended: Boolean!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolAcceptableValues @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    minAcceptablePortionLF: BigInt!
    minAcceptableQuoteValue: BigInt!
    oldMinAcceptablePortionLF: BigInt!
    oldMinAcceptableQuoteValue: BigInt!
    symbolId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolFundingState @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    fundingRateEpochDuration: BigInt!
    fundingRateWindowTime: BigInt!
    symbolId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolMaxLeverage @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    maxLeverage: BigInt!
    oldMaxLeverage: BigInt!
    symbolId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolMaxSlippage @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    maxSlippage: BigInt!
    oldMaxSlippage: BigInt!
    symbolId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolTradingFee @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    oldTradingFee: BigInt!
    symbolId: BigInt!
    tradingFee: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolsPrices @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    liquidationId: Bytes!
    liquidator: Bytes!
    partyA: Bytes!
    prices: [BigInt!]
    symbolIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SetSymbolValidationState @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    isValid: Boolean!
    oldState: Boolean!
    symbolId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SettlePartyALiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amounts: [BigInt!]
    liquidationId: Bytes!
    partyA: Bytes!
    partyBs: [Bytes!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type QuoteSettlementData @entity {
    id: ID!
    quoteId: BigInt!
	accountSource: Bytes!
    currentPrice: BigInt!
    partyBUpnlIndex: Int!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SettleUpnl @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    newPartyAAllocatedBalance: BigInt!
    newPartyBsAllocatedBalances: [BigInt!]
    partyA: Bytes!
    settlementData: [QuoteSettlementData!]
    updatedPrices: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type SuspendBridgeTransaction @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    transactionId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type TransferAllocation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    origin: Bytes!
    originNewAllocatedBalance: BigInt!
    recipient: Bytes!
    recipientNewAllocatedBalance: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type TransferToBridge @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    bridgeAddress: Bytes!
    transactionId: BigInt!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnlockQuote @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    partyB: Bytes!
    quoteId: BigInt!
	accountSource: Bytes!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnpauseAccounting @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnpauseGlobal @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnpauseInternalTransfer @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnpauseLiquidation @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnpausePartyAActions @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type UnpausePartyBActions @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type Withdraw @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    sender: Bytes!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type WithdrawFromReserveVault @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    amount: BigInt!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type WithdrawReceivedBridgeValue @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    transactionId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type WithdrawReceivedBridgeValues @entity(immutable: true) {
    id: ID!
    counterId: BigInt!
    transactionIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}

type AddAccount @entity {
	id: ID!
	account: Bytes!
	user: Bytes!
	accountSource: Bytes!
	blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
    transactionLogIndex: BigInt!
    logIndex: BigInt!
    blockHash: Bytes!
}
