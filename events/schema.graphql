type ActiveEmergencyMode @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AddSymbol @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    name: String!
    minAcceptableQuoteValue: BigInt!
    minAcceptablePortionLF: BigInt!
    tradingFee: BigInt!
    maxLeverage: BigInt!
    fundingRateEpochDuration: BigInt!
    fundingRateWindowTime: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DeactiveEmergencyMode @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DeregisterPartyB @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    index: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type PauseAccounting @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type PauseGlobal @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type PauseLiquidation @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type PausePartyAActions @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type PausePartyBActions @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type RegisterPartyB @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
    id: ID!
    role: Bytes!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
    id: ID!
    role: Bytes!
    user: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetBalanceLimitPerUser @entity(immutable: true) {
    id: ID!
    balanceLimitPerUser: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetCollateral @entity(immutable: true) {
    id: ID!
    collateral: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetDeallocateCooldown @entity(immutable: true) {
    id: ID!
    oldDeallocateCooldown: BigInt!
    newDeallocateCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetFeeCollector @entity(immutable: true) {
    id: ID!
    oldFeeCollector: Bytes!
    newFeeCollector: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetForceCancelCloseCooldown @entity(immutable: true) {
    id: ID!
    oldForceCancelCloseCooldown: BigInt!
    newForceCancelCloseCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetForceCancelCooldown @entity(immutable: true) {
    id: ID!
    oldForceCancelCooldown: BigInt!
    newForceCancelCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetForceCloseCooldown @entity(immutable: true) {
    id: ID!
    oldForceCloseCooldown: BigInt!
    newForceCloseCooldown: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetForceCloseGapRatio @entity(immutable: true) {
    id: ID!
    oldForceCloseGapRatio: BigInt!
    newForceCloseGapRatio: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetLiquidationTimeout @entity(immutable: true) {
    id: ID!
    oldLiquidationTimeout: BigInt!
    newLiquidationTimeout: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetLiquidatorShare @entity(immutable: true) {
    id: ID!
    oldLiquidatorShare: BigInt!
    newLiquidatorShare: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetMuonConfig @entity(immutable: true) {
    id: ID!
    upnlValidTime: BigInt!
    priceValidTime: BigInt!
    priceQuantityValidTime: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetMuonIds @entity(immutable: true) {
    id: ID!
    muonAppId: BigInt!
    gateway: Bytes!
    x: BigInt!
    parity: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetPartyBEmergencyStatus @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    status: Boolean!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetPendingQuotesValidLength @entity(immutable: true) {
    id: ID!
    oldPendingQuotesValidLength: BigInt!
    newPendingQuotesValidLength: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSuspendedAddress @entity(immutable: true) {
    id: ID!
    user: Bytes!
    isSuspended: Boolean!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolAcceptableValues @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    oldMinAcceptableQuoteValue: BigInt!
    oldMinAcceptablePortionLF: BigInt!
    minAcceptableQuoteValue: BigInt!
    minAcceptablePortionLF: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolFundingState @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    fundingRateEpochDuration: BigInt!
    fundingRateWindowTime: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolMaxLeverage @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    oldMaxLeverage: BigInt!
    maxLeverage: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolMaxSlippage @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    oldMaxSlippage: BigInt!
    maxSlippage: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolTradingFee @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    oldTradingFee: BigInt!
    tradingFee: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolValidationState @entity(immutable: true) {
    id: ID!
    symbolId: BigInt!
    oldState: Boolean!
    isValid: Boolean!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UnpauseAccounting @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UnpauseGlobal @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UnpauseLiquidation @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UnpausePartyAActions @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UnpausePartyBActions @entity(immutable: true) {
    id: ID!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DisputeForLiquidation @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type FullyLiquidatedPartyB @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LiquidatePartyA @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyA: Bytes!
    allocatedBalance: BigInt!
    upnl: BigInt!
    totalUnrealizedLoss: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LiquidatePartyB @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyB: Bytes!
    partyA: Bytes!
    partyBAllocatedBalance: BigInt!
    upnl: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LiquidatePendingPositionsPartyA @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LiquidatePositionsPartyA @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyA: Bytes!
    quoteIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LiquidatePositionsPartyB @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyB: Bytes!
    partyA: Bytes!
    quoteIds: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LiquidationDisputed @entity(immutable: true) {
    id: ID!
    partyA: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SetSymbolsPrices @entity(immutable: true) {
    id: ID!
    liquidator: Bytes!
    partyA: Bytes!
    symbolIds: [BigInt!]
    prices:  [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SettlePartyALiquidation @entity(immutable: true) {
    id: ID!
    partyA: Bytes!
    partyBs: [Bytes!]!
    amounts: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type ExpireQuote @entity(immutable: true) {
    id: ID!
    quoteStatus: Int!
    quoteId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type ForceCancelCloseRequest @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type ForceCancelQuote @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type ForceClosePosition @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    filledAmount: BigInt!
    closedPrice: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type RequestToCancelCloseRequest @entity(immutable: true) {
    id: ID!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type RequestToCancelQuote @entity(immutable: true) {
    id: ID!
    partyA: Bytes!
    partyB: Bytes!
    quoteStatus: Int!
    quoteId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type RequestToClosePosition @entity(immutable: true) {
    id: ID!
    partyA: Bytes!
    partyB: Bytes!
    quoteId: BigInt!
    closePrice: BigInt!
    quantityToClose: BigInt!
    orderType: Int!
    deadline: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type SendQuote @entity(immutable: true) {
    id: ID!
    partyA: Bytes!
    quoteId: BigInt!
    partyBsWhiteList: [Bytes!]
    symbolId: BigInt!
    positionType: Int!
    orderType: Int!
    price: BigInt!
    marketPrice: BigInt!
    quantity: BigInt!
    cva: BigInt!
    lf: BigInt!
    partyAmm: BigInt!
    partyBmm: BigInt!
    tradingFee: BigInt!
    deadline: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AllocateForPartyB @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    partyA: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AllocatePartyA @entity(immutable: true) {
    id: ID!
    user: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DeallocateForPartyB @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    partyA: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type DeallocatePartyA @entity(immutable: true) {
    id: ID!
    user: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
    id: ID!
    sender: Bytes!
    user: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type TransferAllocation @entity(immutable: true) {
    id: ID!
    amount: BigInt!
    origin: Bytes!
    recipient: Bytes!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
    id: ID!
    sender: Bytes!
    user: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AcceptCancelCloseRequest @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AcceptCancelRequest @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type AllocatePartyB @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    partyA: Bytes!
    amount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type ChargeFundingRate @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    partyA: Bytes!
    quoteIds: [BigInt!]
    rates: [BigInt!]
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type EmergencyClosePosition @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    filledAmount: BigInt!
    closedPrice: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type FillCloseRequest @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    filledAmount: BigInt!
    closedPrice: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type LockQuote @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    quoteId: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type OpenPosition @entity(immutable: true) {
    id: ID!
    quoteId: BigInt!
    partyA: Bytes!
    partyB: Bytes!
    filledAmount: BigInt!
    openedPrice: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type UnlockQuote @entity(immutable: true) {
    id: ID!
    partyB: Bytes!
    quoteId: BigInt!
    quoteStatus: Int!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

